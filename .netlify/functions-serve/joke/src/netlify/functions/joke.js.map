{
  "version": 3,
  "sources": ["../../home/kt/projects/elm-joke/netlify/functions/joke.ts"],
  "sourceRoot": "/tmp/tmp-10208-hx57JwwJTvh9",
  "sourcesContent": ["import { Handler } from '@netlify/functions';\nimport jokesCs from './jokes/jokes-cs.json';\nimport jokesDe from './jokes/jokes-de.json';\nimport jokesEn from './jokes/jokes-en.json';\nimport jokesEs from './jokes/jokes-es.json';\nimport jokesFr from './jokes/jokes-fr.json';\nimport jokesPt from './jokes/jokes-pt.json';\n\nconst jokes = [\n  ...jokesCs.jokes.map((joke) => ({ lang: 'cs', ...joke })),\n  ...jokesDe.jokes.map((joke) => ({ lang: 'de', ...joke })),\n  ...jokesEn.jokes.map((joke) => ({ lang: 'en', ...joke })),\n  ...jokesEs.jokes.map((joke) => ({ lang: 'es', ...joke })),\n  ...jokesFr.jokes.map((joke) => ({ lang: 'fr', ...joke })),\n  ...jokesPt.jokes.map((joke) => ({ lang: 'pt', ...joke })),\n];\n\ndeclare global {\n  interface Array<T> {\n    random(): T;\n    intersect(another: T[]): T[];\n  }\n}\n\nif (!Array.prototype.random) {\n  Array.prototype.random = function random<T>(this: T[]): T {\n    const r = Math.floor(Math.random() * this.length);\n    return this[r];\n  };\n}\n\nif (!Array.prototype.intersect) {\n  Array.prototype.intersect = function intersect<T>(\n    this: T[],\n    another: T[],\n  ): T[] {\n    const array1 = this.length > another.length ? this : another;\n    const array2 = this.length > another.length ? another : this;\n    const filteredArray = array1.filter((value) => array2.includes(value));\n    return filteredArray;\n  };\n}\n\nconst handler: Handler = async (event, context) => {\n  let filteredJokes = jokes;\n\n  const idRange = event.multiValueQueryStringParameters?.idRange\n    ?.flatMap((d) => d.split(','))\n    .map(parseInt);\n  if (idRange) {\n    console.log('idRange');\n    if (idRange.length === 1) {\n      filteredJokes = [filteredJokes.find((d) => d.id === idRange[0])];\n    } else if (idRange.length === 2) {\n      const [from, to] = idRange;\n      filteredJokes = filteredJokes.filter((d) => d.id >= from && d.id <= to);\n    }\n  }\n\n  const lang = event.queryStringParameters?.lang;\n  if (lang) {\n    console.log('lang');\n    filteredJokes = filteredJokes.filter((d) => d.lang === lang);\n  }\n\n  const safe = event.queryStringParameters?.safe;\n  if (safe) {\n    const s = safe !== 'false';\n    filteredJokes = filteredJokes.filter((d) => d.safe === s);\n  }\n\n  const allowedTypes = event.multiValueQueryStringParameters?.type?.flatMap(\n    (d) => d.split(','),\n  );\n  if (allowedTypes) {\n    console.log(allowedTypes);\n    filteredJokes = filteredJokes.filter((d) => allowedTypes.includes(d.type));\n  }\n\n  const allowedCategories =\n    event.multiValueQueryStringParameters?.categories?.flatMap((d) =>\n      d.split(','),\n    );\n  if (allowedCategories) {\n    console.log(allowedCategories);\n    filteredJokes = filteredJokes.filter((d) =>\n      allowedCategories.includes(d.category),\n    );\n  }\n\n  const blacklistedFlags =\n    event.multiValueQueryStringParameters?.flags?.flatMap((d) => d.split(','));\n  if (blacklistedFlags) {\n    console.log(blacklistedFlags);\n    filteredJokes = filteredJokes\n      .filter((d) => d.safe === false)\n      .filter((d) => {\n        const jokeFlags = Object.entries(d.flags)\n          .filter(([, active]) => active)\n          .map((d) => d[0]);\n        return jokeFlags.intersect(blacklistedFlags).length === 0;\n      });\n  }\n\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: JSON.stringify(filteredJokes.random()),\n  };\n};\n\nexport { handler };\n"],
  "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",
  "names": []
}
